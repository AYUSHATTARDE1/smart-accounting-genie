
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ChevronRight, Calculator as CalcIcon, DollarSign, PieChart, Save } from "lucide-react";
import { jsPDF } from "jspdf";

const Calculator = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    businessType: '',
    revenue: '',
    expenses: '',
    assets: '',
    liabilities: '',
  });
  const [calculationResults, setCalculationResults] = useState<any>(null);

  const handleChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleNext = () => {
    // Simple validation
    if (step === 1 && !formData.businessType) {
      toast({
        title: "Required Field",
        description: "Please select your business type",
        variant: "destructive",
      });
      return;
    }

    if (step === 2) {
      if (!formData.revenue || !formData.expenses) {
        toast({
          title: "Required Fields",
          description: "Please enter your revenue and expenses",
          variant: "destructive",
        });
        return;
      }
    }

    if (step === 3) {
      if (!formData.assets || !formData.liabilities) {
        toast({
          title: "Required Fields",
          description: "Please enter your assets and liabilities",
          variant: "destructive",
        });
        return;
      }
    }

    if (step < 4) {
      setStep(prev => prev + 1);
    } else {
      calculateResults();
    }
  };

  const handleBack = () => {
    if (step > 1) {
      setStep(prev => prev - 1);
    }
  };

  const calculateResults = () => {
    const revenue = parseFloat(formData.revenue);
    const expenses = parseFloat(formData.expenses);
    const assets = parseFloat(formData.assets);
    const liabilities = parseFloat(formData.liabilities);

    // Perform calculations
    const netIncome = revenue - expenses;
    const netWorth = assets - liabilities;
    const profitMargin = revenue > 0 ? (netIncome / revenue) * 100 : 0;
    const debtToAssetRatio = assets > 0 ? (liabilities / assets) * 100 : 0;

    // Store calculation results
    const results = {
      netIncome,
      netWorth,
      profitMargin,
      debtToAssetRatio,
      taxLiability: calculateEstimatedTax(netIncome, formData.businessType),
    };

    setCalculationResults(results);
    setStep(5);
  };

  const calculateEstimatedTax = (income: number, businessType: string) => {
    // Simplified tax calculation based on business type
    let taxRate = 0.15; // Default rate

    switch (businessType) {
      case 'sole-proprietorship':
        taxRate = 0.15;
        break;
      case 'partnership':
        taxRate = 0.25;
        break;
      case 'llc':
        taxRate = 0.20;
        break;
      case 'corporation':
        taxRate = 0.21;
        break;
      default:
        taxRate = 0.15;
    }

    return income > 0 ? income * taxRate : 0;
  };

  const downloadPdf = () => {
    if (!calculationResults) return;

    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor(40, 40, 40);
    doc.text("Financial Calculation Summary", 20, 20);
    
    // Add business info
    doc.setFontSize(12);
    doc.text(`Business Type: ${getBusinessTypeName(formData.businessType)}`, 20, 40);
    
    // Add financial data
    doc.text("Financial Data:", 20, 55);
    doc.text(`Revenue: $${parseFloat(formData.revenue).toFixed(2)}`, 25, 65);
    doc.text(`Expenses: $${parseFloat(formData.expenses).toFixed(2)}`, 25, 75);
    doc.text(`Assets: $${parseFloat(formData.assets).toFixed(2)}`, 25, 85);
    doc.text(`Liabilities: $${parseFloat(formData.liabilities).toFixed(2)}`, 25, 95);
    
    // Add calculation results
    doc.text("Calculation Results:", 20, 115);
    doc.text(`Net Income: $${calculationResults.netIncome.toFixed(2)}`, 25, 125);
    doc.text(`Net Worth: $${calculationResults.netWorth.toFixed(2)}`, 25, 135);
    doc.text(`Profit Margin: ${calculationResults.profitMargin.toFixed(2)}%`, 25, 145);
    doc.text(`Debt-to-Asset Ratio: ${calculationResults.debtToAssetRatio.toFixed(2)}%`, 25, 155);
    doc.text(`Estimated Tax Liability: $${calculationResults.taxLiability.toFixed(2)}`, 25, 165);
    
    // Add footer
    doc.setFontSize(10);
    doc.text("Generated by My Bill Book", 20, 280);
    
    // Save the PDF
    doc.save("financial-calculations.pdf");
    
    toast({
      title: "Success",
      description: "Financial summary downloaded as PDF!",
    });
  };

  const getBusinessTypeName = (type: string) => {
    switch (type) {
      case 'sole-proprietorship': return 'Sole Proprietorship';
      case 'partnership': return 'Partnership';
      case 'llc': return 'Limited Liability Company (LLC)';
      case 'corporation': return 'Corporation';
      default: return type;
    }
  };

  const goToDocumentUpload = () => {
    navigate('/document-upload');
  };
  
  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-4">
            <Label>What type of business do you have?</Label>
            <Select value={formData.businessType} onValueChange={(value) => handleChange('businessType', value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select business type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="sole-proprietorship">Sole Proprietorship</SelectItem>
                <SelectItem value="partnership">Partnership</SelectItem>
                <SelectItem value="llc">Limited Liability Company (LLC)</SelectItem>
                <SelectItem value="corporation">Corporation</SelectItem>
              </SelectContent>
            </Select>
          </div>
        );
      case 2:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="revenue">What was your total revenue in the last year?</Label>
              <div className="relative mt-1">
                <DollarSign className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input 
                  id="revenue"
                  type="number" 
                  placeholder="0.00" 
                  className="pl-9"
                  value={formData.revenue}
                  onChange={(e) => handleChange('revenue', e.target.value)}
                />
              </div>
            </div>
            <div>
              <Label htmlFor="expenses">What were your total expenses in the last year?</Label>
              <div className="relative mt-1">
                <DollarSign className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input 
                  id="expenses"
                  type="number" 
                  placeholder="0.00" 
                  className="pl-9"
                  value={formData.expenses}
                  onChange={(e) => handleChange('expenses', e.target.value)}
                />
              </div>
            </div>
          </div>
        );
      case 3:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="assets">What is the total value of your assets?</Label>
              <div className="relative mt-1">
                <DollarSign className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input 
                  id="assets"
                  type="number" 
                  placeholder="0.00" 
                  className="pl-9"
                  value={formData.assets}
                  onChange={(e) => handleChange('assets', e.target.value)}
                />
              </div>
            </div>
            <div>
              <Label htmlFor="liabilities">What is the total value of your liabilities?</Label>
              <div className="relative mt-1">
                <DollarSign className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input 
                  id="liabilities"
                  type="number" 
                  placeholder="0.00" 
                  className="pl-9"
                  value={formData.liabilities}
                  onChange={(e) => handleChange('liabilities', e.target.value)}
                />
              </div>
            </div>
          </div>
        );
      case 4:
        return (
          <div className="space-y-4 text-center">
            <CalcIcon className="h-16 w-16 mx-auto text-primary" />
            <h3 className="text-xl font-semibold">Ready to Calculate</h3>
            <p className="text-muted-foreground">
              We have all the information we need. Click "Calculate" to generate your financial summary.
            </p>
          </div>
        );
      case 5:
        if (!calculationResults) return null;
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold mb-4">Your Financial Summary</h3>
            
            <div className="space-y-4">
              <div className="flex justify-between border-b pb-2">
                <span>Net Income:</span>
                <span className={calculationResults.netIncome >= 0 ? "text-green-600 font-semibold" : "text-red-600 font-semibold"}>
                  ${calculationResults.netIncome.toFixed(2)}
                </span>
              </div>
              
              <div className="flex justify-between border-b pb-2">
                <span>Net Worth:</span>
                <span className={calculationResults.netWorth >= 0 ? "text-green-600 font-semibold" : "text-red-600 font-semibold"}>
                  ${calculationResults.netWorth.toFixed(2)}
                </span>
              </div>
              
              <div className="flex justify-between border-b pb-2">
                <span>Profit Margin:</span>
                <span className="font-semibold">
                  {calculationResults.profitMargin.toFixed(2)}%
                </span>
              </div>
              
              <div className="flex justify-between border-b pb-2">
                <span>Debt-to-Asset Ratio:</span>
                <span className="font-semibold">
                  {calculationResults.debtToAssetRatio.toFixed(2)}%
                </span>
              </div>
              
              <div className="flex justify-between border-b pb-2">
                <span>Estimated Tax Liability:</span>
                <span className="font-semibold">
                  ${calculationResults.taxLiability.toFixed(2)}
                </span>
              </div>
            </div>
            
            <div className="flex gap-4 pt-2">
              <Button variant="outline" className="flex-1 gap-2" onClick={downloadPdf}>
                <Save className="h-4 w-4" />
                Download as PDF
              </Button>
              <Button variant="outline" className="flex-1" onClick={goToDocumentUpload}>
                Upload Documents
              </Button>
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="container max-w-3xl py-12 animate-fadeIn">
      <Card className="border-none shadow-lg">
        <CardHeader>
          <div className="flex items-center gap-2">
            <CalcIcon className="h-6 w-6 text-primary" />
            <CardTitle>Financial Calculator</CardTitle>
          </div>
          <CardDescription>
            Answer a few questions to calculate your business finances
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="mb-8">
            <div className="flex items-center justify-between">
              {[1, 2, 3, 4, 5].map((stepNumber) => (
                <div key={stepNumber} className="flex flex-col items-center">
                  <div 
                    className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      step >= stepNumber 
                        ? "bg-primary text-primary-foreground" 
                        : "bg-muted text-muted-foreground"
                    }`}
                  >
                    {stepNumber}
                  </div>
                  <span className="text-xs mt-1 text-muted-foreground">
                    {stepNumber === 1 && "Business"}
                    {stepNumber === 2 && "Income"}
                    {stepNumber === 3 && "Assets"}
                    {stepNumber === 4 && "Confirm"}
                    {stepNumber === 5 && "Results"}
                  </span>
                </div>
              ))}
            </div>
            <div className="w-full h-1 bg-muted mt-5 rounded-full overflow-hidden">
              <div 
                className="h-full bg-primary transition-all duration-500 ease-in-out" 
                style={{ width: `${(step / 5) * 100}%` }}
              />
            </div>
          </div>
          
          {renderStep()}
        </CardContent>
        <CardFooter className="flex justify-between">
          {step > 1 && step !== 5 && (
            <Button variant="outline" onClick={handleBack}>
              Back
            </Button>
          )}
          {step === 1 && (
            <div className="w-20"></div>
          )}
          {step < 5 && (
            <Button onClick={handleNext} className="ml-auto gap-2">
              {step === 4 ? "Calculate" : "Next"}
              {step !== 4 && <ChevronRight className="h-4 w-4" />}
            </Button>
          )}
          {step === 5 && (
            <Button onClick={() => navigate('/dashboard')} className="ml-auto">
              Go to Dashboard
            </Button>
          )}
        </CardFooter>
      </Card>
    </div>
  );
};

export default Calculator;
